<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\campus\controllers\base;
use Yii;
use backend\modules\campus\models\Course;
use backend\modules\campus\models\search\CourseSearch;
use backend\modules\campus\models\WorkRecord;
use common\components\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\helpers\ArrayHelper;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
/**
* CourseController implements the CRUD actions for Course model.
*/
class CourseController extends Controller
{


/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;

    /**
    * @inheritdoc
    */
    public function behaviors()
    {
    return [
    'access' => [
    'class' => AccessControl::className(),
    'rules' => [
    [
    'allow' => true,
                        'actions' => ['index', 'view', 'create', 'update', 'delete'],
                        'roles' => ['CampusCourseFull'],
                    ],
    [
    'allow' => true,
                        'actions' => ['index', 'view'],
                        'roles' => ['CampusCourseView'],
                    ],
    [
    'allow' => true,
                        'actions' => ['update', 'create', 'delete'],
                        'roles' => ['CampusCourseEdit'],
                    ],
                ],
            ],
    ];
    }

/**
* Lists all Course models.
* @return mixed
*/
public function actionIndex()
{
    $searchModel  = new CourseSearch;
    $dataProvider = $searchModel->search($_GET);
        $schools = Yii::$app->user->identity->schoolsInfo;
        $grades =  Yii::$app->user->identity->gradesInfo;
        $schools = ArrayHelper::map($schools,'school_id','school_title');
        $grades  = ArrayHelper::map($grades,'grade_id','grade_name');
        //$dataProvider->query->select(['']);
        // $dataProvider->query->andWhere([
        //     'or',
        //     ['grade_id'  => $this->gradeIdCurrent],
        //     ['grade_id'  => 0]
        // ]);
        $dataProvider->sort = [
                   'defaultOrder'=>[
                        'updated_at'=>SORT_DESC,
                   ]
        ];

    Tabs::clearLocalStorage();

    Url::remember();
    \Yii::$app->session['__crudReturnUrl'] = null;

    return $this->render('index', [
    'dataProvider' => $dataProvider,
        'searchModel' => $searchModel,
        'grades'       => $grades,
        'schools'      => $schools,
    ]);
}

/**
* Displays a single Course model.
* @param integer $course_id
*
* @return mixed
*/
public function actionView($course_id)
{
    \Yii::$app->session['__crudReturnUrl'] = Url::previous();
    Url::remember();
    Tabs::rememberActiveState();

    $model = $this->findModel($course_id);
    $is_parent = false;
    if (isset($model->parent_id) && !empty($model->parent_id)) {
        $is_parent = true;
    }

    $searchModel  = new CourseSearch;
    $dataProvider = $searchModel->search($_GET);
    if ($is_parent) {
        $dataProvider->query->andWhere(['course_id' => $model->parent_id]);
    }else{
        $dataProvider->query->andWhere(['course_id' => $model->getChildIds()]);
    }
    // $dataProvider->query->andWhere([
    //     'or',
    //     ['grade_id'  => $this->gradeIdCurrent],
    //     ['grade_id'  => 0]
    // ]);

    return $this->render('view', [
        'model' => $model,
        'dataProvider' => $dataProvider,
        'searchModel' => $searchModel,
        'is_parent' => $is_parent,
    ]);
}

/**
* Creates a new Course model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
public function actionCreate()
{
    $model = new Course;
    $schools = Yii::$app->user->identity->schoolsInfo;
    $schools = ArrayHelper::map($schools,'school_id','school_title');
    try {
        if ($model->load($_POST) && $model->save()) {
/*
            //记录老师要上正课的记录
            $start = date('Y-m-d').' 00:00:00';
            $end   = date('Y-m-d')." 23:59:59";
            $start = strtotime($start);
            $end   = strtotime($end);
            // var_dump($model->attributes);exit;
            // var_dump(($model->start_time >= $start));exit;
            if(($model->start_time >= $start) &&  ($model->start_time <= $end )
                && ($model->status == Course::COURSE_STATUS_OPEN)
                ){
                $work_record = [
                    'title'     =>'上正课',
                    'user_id'   => $model->teacher_id,
                    'type'      => WorkRecord::TYPE_TWO,
                    'status'    => WorkRecord::STATUS_UNFINISHED,
                    'school_id' => $model->school_id,
                    'grade_id'  => $model->grade_id,
                    'course_id' => $model->course_id,
                ];
                $workModel =  WorkRecord::find()
                    ->where(['type'=>WorkRecord::TYPE_TWO , 'course_id'=> $model->course_id])
                    ->one();
                if($workModel == NULL){
                    $workModel = new WorkRecord;
                    $workModel->load($work_record,'');
                    $workModel->save();
                }
            }
            */
            //exit;
            return $this->redirect(['view', 'course_id' => $model->course_id]);

        } elseif (!\Yii::$app->request->isPost) {
            $model->load($_GET);
        }

    } catch (\Exception $e) {
        $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
        $model->addError('_exception', $msg);
    }
        return $this->render('create', [
            'model' => $model,
            'schools'=>$schools
            ]);
    }

    public function actionCreateCourse()
    {
        $model = new Course();
        $model->setScenario(Course::SCENARIO_GEDU_COURSE);
// dump($model->scenarios());exit;
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'course_id' => $model->course_id]);
        } else {
            return $this->render('gedu/create', [
                'model' => $model,
            ]);
        }
    }

/**
* Updates an existing Course model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $course_id
* @return mixed
*/
public function actionUpdate($course_id)
{
    $model = $this->findModel($course_id);
    $schools = Yii::$app->user->identity->schoolsInfo;
    $schools = ArrayHelper::map($schools,'school_id','school_title');
    if ($model->load($_POST) && $model->save()) {
       /*   //修改老师上正课的记录
            $start = date('Y-m-d').' 00:00:00';
            $end   = date('Y-m-d')." 23:59:59";
            $start = strtotime($start);
            $end   = strtotime($end);
            $workModel =  WorkRecord::find()
                    ->where(['type'=>WorkRecord::TYPE_TWO , 'course_id'=> $model->course_id])
                    ->asArray()
                    ->one();
            //var_dump($workModel);exit;
            if(($model->start_time > $end) ||
                ($model->status == Course::COURSE_STATUS_DELECT)||
              //  !isset($model['teacher_id'])                      |
                ($workModel['user_id'] != $model->teacher_id)
                ){
                     WorkRecord::deleteAll([
                            'course_id'=> $model->course_id,
                            //'user_id'  => $model->teacher_id,
                            'type'     => WorkRecord::TYPE_TWO
                        ]);

                if(($model->start_time >= $start) &&  ($model->start_time <= $end )
                && ($model->status == Course::COURSE_STATUS_OPEN)
                ){
                $work_record = [
                    'title'     =>'上正课',
                    'user_id'   => $model->teacher_id,
                    'type'      => WorkRecord::TYPE_TWO,
                    'status'    => WorkRecord::STATUS_UNFINISHED,
                    'school_id' => $model->school_id,
                    'grade_id'  => $model->grade_id,
                    'course_id' => $model->course_id,
                ];
                    $workModel = new WorkRecord;
                    $workModel->load($work_record,'');
                    $workModel->save();
            }
                }
                */
        return $this->redirect(Url::previous());
    } else {

        return $this->render('update', [
            'model' => $model,
            'schools'=>$schools
            ]);
    }
}

    public function actionUpdateCourse($course_id)
    {
        $model = $this->findModel($course_id);
        $model->setScenario(Course::SCENARIO_GEDU_COURSE);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'course_id' => $model->course_id]);
        } else {
            return $this->render('gedu/update', [
                'model' => $model,
            ]);
        }
    }

/**
* Deletes an existing Course model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $course_id
* @return mixed
*/
public function actionDelete($course_id)
{
try {
$this->findModel($course_id)->delete();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$course_id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the Course model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $course_id
* @return Course the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($course_id)
{
if (($model = Course::findOne($course_id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
